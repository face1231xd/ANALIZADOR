
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Dec 03 04:25:04 COT 2021
//----------------------------------------------------

package AS_Y_AL;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Dec 03 04:25:04 COT 2021
  */
public class SintaxisC extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxisC() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxisC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxisC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\024\000\002\002\004\000\002\002\013\000\002\002" +
    "\016\000\002\002\021\000\002\002\024\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\003\006\000\002\003\005\000\002" +
    "\003\002\000\002\004\016\000\002\004\020\000\002\004" +
    "\014\000\002\005\022\000\002\006\007\000\002\007\010" +
    "\000\002\010\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\014\012\016\013\010\014\015\015\005\016" +
    "\014\001\002\000\004\002\ufff8\001\002\000\004\012\131" +
    "\001\002\000\004\002\ufff9\001\002\000\004\002\ufffc\001" +
    "\002\000\004\027\125\001\002\000\004\002\124\001\002" +
    "\000\004\002\ufffa\001\002\000\004\002\ufffb\001\002\000" +
    "\004\026\121\001\002\000\004\024\072\001\002\000\004" +
    "\024\017\001\002\000\004\032\020\001\002\000\006\005" +
    "\021\024\022\001\002\000\004\004\037\001\002\000\004" +
    "\030\023\001\002\000\004\032\024\001\002\000\004\030" +
    "\025\001\002\000\004\005\026\001\002\000\004\032\027" +
    "\001\002\000\004\006\030\001\002\000\004\024\031\001" +
    "\002\000\004\032\032\001\002\000\004\005\033\001\002" +
    "\000\004\032\034\001\002\000\004\006\035\001\002\000" +
    "\004\010\036\001\002\000\004\002\ufff1\001\002\000\010" +
    "\004\ufff5\007\ufff5\032\041\001\002\000\006\004\046\007" +
    "\045\001\002\000\004\031\042\001\002\000\004\030\043" +
    "\001\002\000\010\004\ufff6\007\ufff6\030\044\001\002\000" +
    "\006\004\ufff7\007\ufff7\001\002\000\004\004\051\001\002" +
    "\000\004\006\047\001\002\000\004\010\050\001\002\000" +
    "\004\002\000\001\002\000\010\004\ufff5\007\ufff5\032\041" +
    "\001\002\000\006\004\054\007\053\001\002\000\004\004" +
    "\057\001\002\000\004\006\055\001\002\000\004\010\056" +
    "\001\002\000\004\002\uffff\001\002\000\010\004\ufff5\007" +
    "\ufff5\032\041\001\002\000\006\004\062\007\061\001\002" +
    "\000\004\004\065\001\002\000\004\006\063\001\002\000" +
    "\004\010\064\001\002\000\004\002\ufffe\001\002\000\006" +
    "\004\ufff5\032\041\001\002\000\004\004\067\001\002\000" +
    "\004\006\070\001\002\000\004\010\071\001\002\000\004" +
    "\002\ufffd\001\002\000\004\032\073\001\002\000\004\025" +
    "\074\001\002\000\004\005\075\001\002\000\006\011\077" +
    "\033\076\001\002\000\004\007\110\001\002\000\004\032" +
    "\100\001\002\000\004\011\101\001\002\000\004\007\102" +
    "\001\002\000\004\011\103\001\002\000\004\032\104\001" +
    "\002\000\004\011\105\001\002\000\004\006\106\001\002" +
    "\000\004\010\107\001\002\000\004\002\ufff3\001\002\000" +
    "\006\011\112\033\111\001\002\000\004\006\117\001\002" +
    "\000\004\032\113\001\002\000\004\011\114\001\002\000" +
    "\004\006\115\001\002\000\004\010\116\001\002\000\004" +
    "\002\ufff4\001\002\000\004\010\120\001\002\000\004\002" +
    "\ufff2\001\002\000\004\032\122\001\002\000\004\010\123" +
    "\001\002\000\004\002\uffee\001\002\000\004\002\001\001" +
    "\002\000\004\024\126\001\002\000\004\032\127\001\002" +
    "\000\004\010\130\001\002\000\004\002\ufff0\001\002\000" +
    "\004\024\132\001\002\000\004\024\133\001\002\000\004" +
    "\032\134\001\002\000\004\010\135\001\002\000\004\002" +
    "\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\016\002\010\004\006\005\012\006\011\007" +
    "\005\010\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxisC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxisC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxisC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

        public void syntax_error (Symbol s){
            this.s=s;
        
        }
        public Symbol getS(){
            return this.s;
        }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxisC$actions {
  private final SintaxisC parser;

  /** Constructor */
  CUP$SintaxisC$actions(SintaxisC parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxisC$do_action(
    int                        CUP$SintaxisC$act_num,
    java_cup.runtime.lr_parser CUP$SintaxisC$parser,
    java.util.Stack            CUP$SintaxisC$stack,
    int                        CUP$SintaxisC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxisC$result;

      /* select the action based on the action number */
      switch (CUP$SintaxisC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EJEROLL ::= TCL FILTROTRAN IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxisC$result = parser.getSymbolFactory().newSymbol("EJEROLL",6, ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.elementAt(CUP$SintaxisC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.peek()), RESULT);
            }
          return CUP$SintaxisC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PERMISOU ::= DCL DDL PALABRA_RESERVADA PALABRA_RESERVADA IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxisC$result = parser.getSymbolFactory().newSymbol("PERMISOU",5, ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.elementAt(CUP$SintaxisC$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.peek()), RESULT);
            }
          return CUP$SintaxisC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SELEFROM ::= DQL ALL PALABRA_RESERVADA IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxisC$result = parser.getSymbolFactory().newSymbol("SELEFROM",4, ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.elementAt(CUP$SintaxisC$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.peek()), RESULT);
            }
          return CUP$SintaxisC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ALTERARTABLA ::= DDL PALABRA_RESERVADA IDENTIFICADOR PALABRA_RESERVADA RESTRICCION IDENTIFICADOR RESTRICCION ABREPARE IDENTIFICADOR CIERRAPARE PALABRA_RESERVADA IDENTIFICADOR ABREPARE IDENTIFICADOR CIERRAPARE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxisC$result = parser.getSymbolFactory().newSymbol("ALTERARTABLA",3, ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.elementAt(CUP$SintaxisC$top-15)), ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.peek()), RESULT);
            }
          return CUP$SintaxisC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSERTAR ::= DML PALABRA_RESERVADA IDENTIFICADOR ASIGNACION ABREPARE NUMERO COMA NUMERO CIERRAPARE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxisC$result = parser.getSymbolFactory().newSymbol("INSERTAR",2, ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.elementAt(CUP$SintaxisC$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.peek()), RESULT);
            }
          return CUP$SintaxisC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSERTAR ::= DML PALABRA_RESERVADA IDENTIFICADOR ASIGNACION ABREPARE APOSTROFE IDENTIFICADOR APOSTROFE COMA APOSTROFE IDENTIFICADOR APOSTROFE CIERRAPARE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxisC$result = parser.getSymbolFactory().newSymbol("INSERTAR",2, ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.elementAt(CUP$SintaxisC$top-13)), ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.peek()), RESULT);
            }
          return CUP$SintaxisC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSERTAR ::= DML PALABRA_RESERVADA IDENTIFICADOR ASIGNACION ABREPARE NUMERO COMA APOSTROFE IDENTIFICADOR APOSTROFE CIERRAPARE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxisC$result = parser.getSymbolFactory().newSymbol("INSERTAR",2, ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.elementAt(CUP$SintaxisC$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.peek()), RESULT);
            }
          return CUP$SintaxisC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION ::= 
            {
              Object RESULT =null;

              CUP$SintaxisC$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.peek()), RESULT);
            }
          return CUP$SintaxisC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACION ::= IDENTIFICADOR TIPO_DATO RESTRICCION 
            {
              Object RESULT =null;

              CUP$SintaxisC$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.elementAt(CUP$SintaxisC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.peek()), RESULT);
            }
          return CUP$SintaxisC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION ::= IDENTIFICADOR TIPO_DATO RESTRICCION RESTRICCION 
            {
              Object RESULT =null;

              CUP$SintaxisC$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.elementAt(CUP$SintaxisC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.peek()), RESULT);
            }
          return CUP$SintaxisC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= EJEROLL 
            {
              Object RESULT =null;

              CUP$SintaxisC$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.peek()), RESULT);
            }
          return CUP$SintaxisC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= PERMISOU 
            {
              Object RESULT =null;

              CUP$SintaxisC$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.peek()), RESULT);
            }
          return CUP$SintaxisC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= SELEFROM 
            {
              Object RESULT =null;

              CUP$SintaxisC$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.peek()), RESULT);
            }
          return CUP$SintaxisC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= ALTERARTABLA 
            {
              Object RESULT =null;

              CUP$SintaxisC$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.peek()), RESULT);
            }
          return CUP$SintaxisC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= INSERTAR 
            {
              Object RESULT =null;

              CUP$SintaxisC$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.peek()), RESULT);
            }
          return CUP$SintaxisC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= DDL PALABRA_RESERVADA IDENTIFICADOR ABREPARE SALTOLINEA DECLARACION COMA SALTOLINEA DECLARACION COMA SALTOLINEA DECLARACION COMA SALTOLINEA DECLARACION SALTOLINEA CIERRAPARE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxisC$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.elementAt(CUP$SintaxisC$top-17)), ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.peek()), RESULT);
            }
          return CUP$SintaxisC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= DDL PALABRA_RESERVADA IDENTIFICADOR ABREPARE SALTOLINEA DECLARACION COMA SALTOLINEA DECLARACION COMA SALTOLINEA DECLARACION SALTOLINEA CIERRAPARE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxisC$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.elementAt(CUP$SintaxisC$top-14)), ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.peek()), RESULT);
            }
          return CUP$SintaxisC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= DDL PALABRA_RESERVADA IDENTIFICADOR ABREPARE SALTOLINEA DECLARACION COMA SALTOLINEA DECLARACION SALTOLINEA CIERRAPARE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxisC$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.elementAt(CUP$SintaxisC$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.peek()), RESULT);
            }
          return CUP$SintaxisC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= DDL PALABRA_RESERVADA IDENTIFICADOR ABREPARE SALTOLINEA DECLARACION SALTOLINEA CIERRAPARE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxisC$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.elementAt(CUP$SintaxisC$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.peek()), RESULT);
            }
          return CUP$SintaxisC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.elementAt(CUP$SintaxisC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.elementAt(CUP$SintaxisC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxisC$stack.elementAt(CUP$SintaxisC$top-1)).value;
		RESULT = start_val;
              CUP$SintaxisC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.elementAt(CUP$SintaxisC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxisC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxisC$parser.done_parsing();
          return CUP$SintaxisC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

