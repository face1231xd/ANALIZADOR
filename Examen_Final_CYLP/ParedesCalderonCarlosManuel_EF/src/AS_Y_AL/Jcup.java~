/* The following code was generated by JFlex 1.4.3 on 05/12/21 08:22 AM */

package AS_Y_AL;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 05/12/21 08:22 AM from the specification file
 * <tt>D:/OneDrive/Escritorio/Examen_Final_CYLP/ParedesCalderonCarlosManuel_EF/src/AS_Y_AL/Jcup.flex</tt>
 */
class Jcup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  4,  0,  0,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    24, 32,  0,  0,  0,  0,  0, 10,  6,  7, 38,  0,  8, 40,  0,  5, 
     2,  2, 39,  2,  2,  2,  2,  2,  2,  2,  0,  9, 30, 31, 30,  0, 
     0, 14, 29, 11, 16, 13, 35, 27, 36, 25, 33, 26, 19, 22, 21, 17, 
    18,  1, 12, 23, 15, 20, 28, 37,  1, 34,  1,  0,  0,  0,  0,  1, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\12\15\2\1\4\4\2\2\13"+
    "\1\1\3\2\1\14\1\4\1\0\15\2\1\15\5\2"+
    "\1\16\12\2\1\0\13\2\1\0\12\2\1\17\1\2"+
    "\1\16\16\2\1\16\6\2\1\0\20\2\1\3\3\2"+
    "\1\20\5\2\1\21\3\2\1\22\5\2\1\23\1\0"+
    "\2\2\1\0\3\2\1\0\7\2\1\24\15\2\2\0"+
    "\3\2\1\25\1\2\1\26\3\2\1\0\2\2\1\27"+
    "\3\2\1\0\1\2\2\0\1\30\3\2\1\31\1\2"+
    "\1\0\4\2\1\0\1\2\3\0\2\2\1\0\3\2"+
    "\1\24\4\0\1\20\1\0\2\2\1\0\1\32\3\0"+
    "\1\25\14\0\1\27\1\30";

  private static int [] zzUnpackAction() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\51\0\51\0\51\0\51\0\u0148\0\u0171\0\u019a\0\u01c3"+
    "\0\u01ec\0\u0215\0\u023e\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b"+
    "\0\u0334\0\u035d\0\u0386\0\u03af\0\u03d8\0\u0401\0\u042a\0\51"+
    "\0\u042a\0\u0453\0\u047c\0\u04a5\0\51\0\u04ce\0\u04f7\0\u0520"+
    "\0\u0549\0\u0572\0\u059b\0\u05c4\0\u05ed\0\u0616\0\u063f\0\u0668"+
    "\0\u0691\0\u06ba\0\u06e3\0\u070c\0\122\0\u0735\0\u075e\0\u0787"+
    "\0\u07b0\0\u07d9\0\u0802\0\u082b\0\u0854\0\u087d\0\u08a6\0\u08cf"+
    "\0\u08f8\0\u0921\0\u094a\0\u0973\0\u099c\0\u09c5\0\u09ee\0\u0a17"+
    "\0\u0a40\0\u0a69\0\u0a92\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f"+
    "\0\u0b88\0\u0bb1\0\u0bda\0\u0c03\0\u0c2c\0\u0c55\0\u0c7e\0\u0ca7"+
    "\0\u0cd0\0\u0cf9\0\u0d22\0\u0d4b\0\122\0\u0d74\0\122\0\u0d9d"+
    "\0\u0dc6\0\u0def\0\u0e18\0\u0e41\0\u0e6a\0\u0e93\0\u0ebc\0\u0ee5"+
    "\0\u0f0e\0\u0f37\0\u0f60\0\u0f89\0\u0fb2\0\u0fdb\0\u1004\0\u102d"+
    "\0\u1056\0\u107f\0\u10a8\0\u10d1\0\u10fa\0\u1123\0\u114c\0\u1175"+
    "\0\u119e\0\u11c7\0\u11f0\0\u1219\0\u1242\0\u126b\0\u1294\0\u12bd"+
    "\0\u12e6\0\u130f\0\u1338\0\u1361\0\u138a\0\51\0\u13b3\0\u13dc"+
    "\0\u1405\0\122\0\u142e\0\u1457\0\u1480\0\u14a9\0\u14d2\0\122"+
    "\0\u14fb\0\u1524\0\u154d\0\122\0\u1576\0\u159f\0\u15c8\0\u15f1"+
    "\0\u161a\0\122\0\u1643\0\u166c\0\u1695\0\u16be\0\u16e7\0\u1710"+
    "\0\u1739\0\u1762\0\u178b\0\u17b4\0\u17dd\0\u1806\0\u182f\0\u1858"+
    "\0\u1881\0\122\0\u18aa\0\u18d3\0\u18fc\0\u1925\0\u194e\0\u1977"+
    "\0\u19a0\0\u19c9\0\u19f2\0\u1a1b\0\u1a44\0\u1a6d\0\u1a96\0\u1abf"+
    "\0\u1ae8\0\u1b11\0\u1b3a\0\u1b63\0\51\0\u1b8c\0\122\0\u1bb5"+
    "\0\u1bde\0\u1c07\0\u1c30\0\u1c59\0\u1c82\0\122\0\u1cab\0\u1cd4"+
    "\0\u1cfd\0\u1d26\0\u1d4f\0\u1d78\0\u1da1\0\u1dca\0\u1df3\0\u1e1c"+
    "\0\u1e45\0\122\0\u1e6e\0\u1e97\0\u1ec0\0\u1ee9\0\u1f12\0\u1f3b"+
    "\0\u1f64\0\u1f8d\0\u1fb6\0\u1fdf\0\u2008\0\u2031\0\u205a\0\u2083"+
    "\0\u20ac\0\u20d5\0\u20fe\0\51\0\u2127\0\u2150\0\u2179\0\u21a2"+
    "\0\51\0\u21cb\0\u21f4\0\u221d\0\u2246\0\51\0\u226f\0\u2298"+
    "\0\u22c1\0\122\0\u22ea\0\u2313\0\u233c\0\u2365\0\u238e\0\u23b7"+
    "\0\u23e0\0\u2409\0\u2432\0\u245b\0\u2484\0\u24ad\0\51\0\51";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\3\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\3\1\43\1\3\1\44\1\45\1\4"+
    "\1\2\52\0\1\3\11\0\15\3\1\0\5\3\3\0"+
    "\5\3\5\0\1\4\44\0\1\4\4\0\1\5\24\0"+
    "\1\5\24\0\1\6\51\0\1\46\113\0\1\47\1\0"+
    "\1\3\11\0\1\3\1\50\1\3\1\51\2\3\1\52"+
    "\6\3\1\0\5\3\3\0\3\3\1\53\1\3\4\0"+
    "\1\3\11\0\2\3\1\54\3\3\1\55\6\3\1\0"+
    "\1\56\4\3\3\0\5\3\4\0\1\3\11\0\12\3"+
    "\1\57\2\3\1\0\5\3\3\0\5\3\4\0\1\3"+
    "\11\0\5\3\1\60\2\3\1\61\1\3\1\62\2\3"+
    "\1\0\5\3\3\0\5\3\4\0\1\3\11\0\1\3"+
    "\1\63\1\3\1\64\2\3\1\65\6\3\1\0\1\66"+
    "\4\3\3\0\5\3\4\0\1\3\11\0\1\3\1\67"+
    "\1\70\1\71\2\3\1\72\6\3\1\0\5\3\3\0"+
    "\5\3\4\0\1\3\11\0\1\3\1\73\13\3\1\0"+
    "\5\3\3\0\5\3\4\0\1\3\11\0\1\3\1\74"+
    "\13\3\1\0\5\3\3\0\5\3\4\0\1\3\11\0"+
    "\2\3\1\75\3\3\1\76\6\3\1\0\5\3\3\0"+
    "\5\3\4\0\1\3\11\0\7\3\1\77\2\3\1\100"+
    "\2\3\1\0\5\3\3\0\5\3\4\0\1\3\11\0"+
    "\6\3\1\101\2\3\1\102\3\3\1\0\5\3\3\0"+
    "\5\3\4\0\1\3\11\0\2\3\1\103\12\3\1\0"+
    "\5\3\3\0\5\3\4\0\1\3\11\0\2\3\1\104"+
    "\1\105\11\3\1\0\5\3\3\0\5\3\6\0\1\5"+
    "\21\0\1\106\2\0\1\5\21\0\1\3\11\0\12\3"+
    "\1\107\2\3\1\0\5\3\3\0\5\3\4\0\1\3"+
    "\11\0\1\3\1\110\13\3\1\0\5\3\3\0\5\3"+
    "\4\0\1\3\11\0\3\3\1\111\11\3\1\0\5\3"+
    "\3\0\5\3\4\0\1\3\11\0\2\3\1\112\12\3"+
    "\1\0\5\3\3\0\5\3\42\0\1\40\12\0\1\3"+
    "\11\0\6\3\1\113\6\3\1\0\5\3\3\0\5\3"+
    "\4\0\1\3\11\0\1\3\1\114\4\3\1\115\1\3"+
    "\1\116\1\117\3\3\1\0\5\3\3\0\5\3\4\0"+
    "\1\3\11\0\15\3\1\0\1\120\4\3\3\0\3\3"+
    "\1\121\1\3\3\0\4\46\1\0\44\46\2\0\1\122"+
    "\44\0\1\122\2\0\1\3\11\0\2\3\1\123\12\3"+
    "\1\0\5\3\3\0\5\3\4\0\1\3\11\0\14\3"+
    "\1\124\1\0\5\3\3\0\5\3\4\0\1\3\11\0"+
    "\12\3\1\125\1\126\1\3\1\0\5\3\3\0\5\3"+
    "\4\0\1\3\11\0\3\3\1\127\11\3\1\0\5\3"+
    "\3\0\5\3\4\0\1\3\11\0\12\3\1\130\2\3"+
    "\1\0\3\3\1\131\1\3\3\0\2\3\1\132\2\3"+
    "\4\0\1\3\11\0\10\3\1\133\4\3\1\0\5\3"+
    "\3\0\5\3\4\0\1\3\11\0\15\3\1\0\2\3"+
    "\1\134\2\3\3\0\5\3\4\0\1\3\11\0\5\3"+
    "\1\135\7\3\1\0\5\3\3\0\5\3\4\0\1\3"+
    "\11\0\5\3\1\65\7\3\1\0\5\3\3\0\5\3"+
    "\4\0\1\3\11\0\4\3\1\136\10\3\1\0\5\3"+
    "\3\0\5\3\4\0\1\3\11\0\5\3\1\137\7\3"+
    "\1\0\5\3\3\0\5\3\4\0\1\3\11\0\3\3"+
    "\1\140\5\3\1\141\3\3\1\0\5\3\3\0\5\3"+
    "\4\0\1\3\11\0\15\3\1\0\4\3\1\142\3\0"+
    "\5\3\4\0\1\3\11\0\13\3\1\143\1\3\1\0"+
    "\5\3\3\0\5\3\4\0\1\3\11\0\6\3\1\144"+
    "\6\3\1\0\5\3\3\0\5\3\4\0\1\3\11\0"+
    "\10\3\1\145\4\3\1\0\5\3\3\0\5\3\4\0"+
    "\1\3\11\0\4\3\1\146\10\3\1\0\5\3\3\0"+
    "\5\3\4\0\1\3\11\0\11\3\1\147\3\3\1\0"+
    "\5\3\3\0\5\3\4\0\1\3\11\0\5\3\1\150"+
    "\7\3\1\0\5\3\3\0\5\3\4\0\1\3\11\0"+
    "\15\3\1\0\1\151\4\3\3\0\5\3\4\0\1\3"+
    "\11\0\15\3\1\0\5\3\3\0\2\3\1\152\2\3"+
    "\4\0\1\3\11\0\1\153\14\3\1\0\5\3\3\0"+
    "\5\3\4\0\1\3\11\0\5\3\1\154\7\3\1\0"+
    "\5\3\3\0\5\3\4\0\1\3\11\0\15\3\1\0"+
    "\1\155\4\3\3\0\5\3\4\0\1\3\11\0\4\3"+
    "\1\156\10\3\1\0\5\3\3\0\5\3\4\0\1\3"+
    "\11\0\13\3\1\157\1\3\1\0\5\3\3\0\5\3"+
    "\4\0\1\3\11\0\1\3\1\160\13\3\1\0\5\3"+
    "\3\0\5\3\4\0\1\3\11\0\4\3\1\161\3\3"+
    "\1\162\3\3\1\163\1\0\5\3\3\0\5\3\4\0"+
    "\1\3\11\0\15\3\1\0\3\3\1\164\1\3\3\0"+
    "\5\3\27\0\1\165\25\0\1\3\11\0\4\3\1\166"+
    "\5\3\1\167\1\3\1\170\1\0\5\3\3\0\5\3"+
    "\4\0\1\3\11\0\3\3\1\171\2\3\1\172\6\3"+
    "\1\0\5\3\3\0\5\3\4\0\1\3\11\0\1\3"+
    "\1\173\6\3\1\174\4\3\1\0\5\3\3\0\5\3"+
    "\4\0\1\3\11\0\15\3\1\0\2\3\1\175\2\3"+
    "\3\0\5\3\4\0\1\3\11\0\15\3\1\0\1\176"+
    "\4\3\3\0\5\3\4\0\1\3\11\0\6\3\1\177"+
    "\6\3\1\0\5\3\3\0\5\3\4\0\1\3\11\0"+
    "\1\3\1\200\13\3\1\0\5\3\3\0\5\3\4\0"+
    "\1\3\11\0\6\3\1\201\6\3\1\0\5\3\3\0"+
    "\5\3\4\0\1\3\11\0\10\3\1\202\4\3\1\0"+
    "\5\3\3\0\5\3\4\0\1\3\11\0\4\3\1\203"+
    "\10\3\1\0\5\3\3\0\5\3\4\0\1\3\11\0"+
    "\2\3\1\204\12\3\1\0\1\205\4\3\3\0\5\3"+
    "\5\0\1\122\4\0\1\206\37\0\1\122\2\0\1\3"+
    "\11\0\3\3\1\207\11\3\1\0\5\3\3\0\5\3"+
    "\4\0\1\3\11\0\2\3\1\135\12\3\1\0\5\3"+
    "\3\0\5\3\4\0\1\3\11\0\14\3\1\210\1\0"+
    "\5\3\3\0\5\3\4\0\1\3\11\0\13\3\1\211"+
    "\1\3\1\0\5\3\3\0\5\3\4\0\1\3\11\0"+
    "\1\3\1\212\13\3\1\0\5\3\3\0\5\3\4\0"+
    "\1\3\11\0\3\3\1\213\11\3\1\0\5\3\3\0"+
    "\5\3\4\0\1\3\11\0\6\3\1\214\6\3\1\0"+
    "\5\3\3\0\5\3\4\0\1\3\11\0\2\3\1\215"+
    "\12\3\1\0\5\3\3\0\5\3\4\0\1\3\11\0"+
    "\10\3\1\216\4\3\1\0\5\3\3\0\5\3\4\0"+
    "\1\3\11\0\15\3\1\0\5\3\3\0\3\3\1\152"+
    "\1\3\4\0\1\3\11\0\2\3\1\217\12\3\1\0"+
    "\5\3\3\0\5\3\4\0\1\3\11\0\12\3\1\220"+
    "\2\3\1\0\5\3\3\0\5\3\4\0\1\3\11\0"+
    "\12\3\1\221\2\3\1\0\5\3\3\0\5\3\4\0"+
    "\1\3\11\0\10\3\1\222\4\3\1\0\5\3\3\0"+
    "\5\3\4\0\1\3\11\0\2\3\1\223\12\3\1\0"+
    "\5\3\3\0\5\3\4\0\1\3\11\0\7\3\1\224"+
    "\5\3\1\0\5\3\3\0\5\3\4\0\1\3\11\0"+
    "\2\3\1\225\12\3\1\0\5\3\3\0\5\3\4\0"+
    "\1\3\11\0\2\3\1\212\12\3\1\0\5\3\3\0"+
    "\5\3\4\0\1\3\11\0\15\3\1\0\4\3\1\226"+
    "\3\0\5\3\4\0\1\3\11\0\2\3\1\227\12\3"+
    "\1\0\5\3\3\0\5\3\4\0\1\3\11\0\13\3"+
    "\1\230\1\3\1\0\5\3\3\0\5\3\4\0\1\3"+
    "\11\0\4\3\1\231\10\3\1\0\5\3\3\0\5\3"+
    "\4\0\1\3\11\0\15\3\1\0\1\3\1\232\3\3"+
    "\3\0\5\3\4\0\1\3\11\0\3\3\1\225\11\3"+
    "\1\0\5\3\3\0\5\3\4\0\1\3\11\0\6\3"+
    "\1\176\6\3\1\0\5\3\3\0\5\3\4\0\1\3"+
    "\11\0\15\3\1\233\5\3\3\0\5\3\4\0\1\3"+
    "\11\0\15\3\1\0\4\3\1\234\3\0\5\3\4\0"+
    "\1\3\11\0\15\3\1\0\2\3\1\235\2\3\3\0"+
    "\5\3\4\0\1\3\11\0\15\3\1\236\5\3\3\0"+
    "\5\3\4\0\1\3\11\0\2\3\1\237\12\3\1\0"+
    "\5\3\3\0\5\3\4\0\1\3\11\0\14\3\1\240"+
    "\1\0\5\3\3\0\5\3\4\0\1\3\11\0\2\3"+
    "\1\241\12\3\1\0\5\3\3\0\5\3\26\0\1\242"+
    "\26\0\1\3\11\0\6\3\1\65\6\3\1\0\5\3"+
    "\3\0\5\3\4\0\1\3\11\0\2\3\1\243\12\3"+
    "\1\0\5\3\3\0\5\3\4\0\1\3\11\0\2\3"+
    "\1\244\12\3\1\0\5\3\3\0\5\3\4\0\1\3"+
    "\11\0\12\3\1\245\2\3\1\0\5\3\3\0\5\3"+
    "\4\0\1\3\11\0\11\3\1\246\3\3\1\0\5\3"+
    "\3\0\5\3\4\0\1\3\11\0\1\247\14\3\1\0"+
    "\5\3\3\0\5\3\4\0\1\3\11\0\11\3\1\250"+
    "\3\3\1\0\5\3\3\0\5\3\4\0\1\3\11\0"+
    "\15\3\1\0\1\251\4\3\3\0\5\3\4\0\1\3"+
    "\11\0\12\3\1\252\2\3\1\0\5\3\3\0\5\3"+
    "\4\0\1\3\11\0\13\3\1\65\1\3\1\0\5\3"+
    "\3\0\5\3\4\0\1\3\11\0\2\3\1\253\12\3"+
    "\1\0\5\3\3\0\5\3\4\0\1\3\11\0\3\3"+
    "\1\254\11\3\1\0\5\3\3\0\5\3\4\0\1\3"+
    "\11\0\10\3\1\255\4\3\1\0\5\3\3\0\5\3"+
    "\4\0\1\3\11\0\15\3\1\0\5\3\3\0\3\3"+
    "\1\65\1\3\4\0\1\3\11\0\1\3\1\124\13\3"+
    "\1\0\5\3\3\0\5\3\4\0\1\3\11\0\10\3"+
    "\1\124\4\3\1\0\5\3\3\0\5\3\4\0\1\3"+
    "\11\0\4\3\1\256\10\3\1\0\5\3\3\0\5\3"+
    "\4\0\1\3\11\0\4\3\1\257\10\3\1\0\5\3"+
    "\3\0\5\3\4\0\1\3\11\0\2\3\1\260\12\3"+
    "\1\0\1\261\4\3\3\0\5\3\4\0\1\3\11\0"+
    "\13\3\1\256\1\3\1\0\5\3\3\0\5\3\4\0"+
    "\1\3\11\0\15\3\1\0\1\3\1\262\3\3\3\0"+
    "\5\3\4\0\1\3\11\0\1\3\1\263\13\3\1\0"+
    "\5\3\3\0\5\3\4\0\1\3\11\0\15\3\1\0"+
    "\4\3\1\264\3\0\5\3\4\0\1\3\11\0\1\3"+
    "\1\224\13\3\1\0\5\3\3\0\5\3\4\0\1\3"+
    "\11\0\1\123\14\3\1\0\5\3\3\0\5\3\4\0"+
    "\1\3\11\0\2\3\1\65\12\3\1\0\5\3\3\0"+
    "\5\3\4\0\1\3\11\0\14\3\1\265\1\0\5\3"+
    "\3\0\5\3\4\0\1\3\11\0\4\3\1\235\10\3"+
    "\1\0\5\3\3\0\5\3\4\0\1\3\11\0\10\3"+
    "\1\146\4\3\1\0\5\3\3\0\5\3\4\0\1\3"+
    "\11\0\1\3\1\266\13\3\1\0\5\3\3\0\5\3"+
    "\4\0\1\3\11\0\3\3\1\267\11\3\1\0\5\3"+
    "\3\0\5\3\4\0\1\3\11\0\15\3\1\270\5\3"+
    "\3\0\5\3\30\0\1\106\24\0\1\3\11\0\2\3"+
    "\1\127\12\3\1\0\5\3\3\0\5\3\4\0\1\3"+
    "\11\0\2\3\1\232\12\3\1\0\5\3\3\0\5\3"+
    "\22\0\1\271\32\0\1\3\11\0\1\272\14\3\1\0"+
    "\5\3\3\0\5\3\4\0\1\3\11\0\15\3\1\0"+
    "\1\273\4\3\3\0\5\3\4\0\1\3\11\0\7\3"+
    "\1\274\5\3\1\0\5\3\3\0\5\3\26\0\1\275"+
    "\26\0\1\3\11\0\1\3\1\231\13\3\1\0\5\3"+
    "\3\0\5\3\4\0\1\3\11\0\1\3\1\276\13\3"+
    "\1\0\5\3\3\0\5\3\4\0\1\3\11\0\4\3"+
    "\1\277\10\3\1\0\5\3\3\0\5\3\4\0\1\3"+
    "\11\0\7\3\1\266\5\3\1\0\5\3\3\0\5\3"+
    "\4\0\1\3\11\0\15\3\1\0\5\3\3\0\3\3"+
    "\1\300\1\3\4\0\1\3\11\0\2\3\1\301\12\3"+
    "\1\0\5\3\3\0\5\3\4\0\1\3\11\0\12\3"+
    "\1\135\2\3\1\0\5\3\3\0\5\3\4\0\1\3"+
    "\11\0\15\3\1\0\1\302\4\3\3\0\5\3\4\0"+
    "\1\3\11\0\4\3\1\212\10\3\1\0\5\3\3\0"+
    "\5\3\4\0\1\3\11\0\15\3\1\303\5\3\3\0"+
    "\5\3\4\0\1\3\11\0\2\3\1\224\12\3\1\0"+
    "\5\3\3\0\5\3\4\0\1\3\11\0\1\3\1\304"+
    "\13\3\1\0\5\3\3\0\5\3\4\0\1\3\11\0"+
    "\12\3\1\305\2\3\1\0\5\3\3\0\5\3\4\0"+
    "\1\3\11\0\4\3\1\306\10\3\1\0\5\3\3\0"+
    "\5\3\4\0\1\3\11\0\2\3\1\277\12\3\1\0"+
    "\5\3\3\0\5\3\4\0\1\3\11\0\2\3\1\307"+
    "\12\3\1\0\5\3\3\0\5\3\4\0\1\3\11\0"+
    "\3\3\1\310\11\3\1\0\5\3\3\0\5\3\4\0"+
    "\1\3\11\0\4\3\1\311\10\3\1\0\5\3\3\0"+
    "\5\3\4\0\1\3\11\0\15\3\1\312\5\3\3\0"+
    "\5\3\4\0\1\3\11\0\1\3\1\313\13\3\1\0"+
    "\5\3\3\0\5\3\44\0\1\314\23\0\1\315\35\0"+
    "\1\3\11\0\4\3\1\316\10\3\1\0\5\3\3\0"+
    "\5\3\4\0\1\3\11\0\6\3\1\317\6\3\1\0"+
    "\5\3\3\0\5\3\4\0\1\3\11\0\6\3\1\320"+
    "\6\3\1\0\5\3\3\0\5\3\4\0\1\3\11\0"+
    "\4\3\1\232\10\3\1\0\5\3\3\0\5\3\4\0"+
    "\1\3\11\0\3\3\1\321\11\3\1\0\5\3\3\0"+
    "\5\3\4\0\1\3\11\0\14\3\1\322\1\0\5\3"+
    "\3\0\5\3\4\0\1\3\11\0\15\3\1\0\2\3"+
    "\1\323\2\3\3\0\5\3\24\0\1\324\30\0\1\3"+
    "\11\0\3\3\1\325\11\3\1\0\5\3\3\0\5\3"+
    "\4\0\1\3\11\0\4\3\1\224\10\3\1\0\5\3"+
    "\3\0\5\3\4\0\1\3\11\0\12\3\1\326\2\3"+
    "\1\0\5\3\3\0\5\3\4\0\1\3\11\0\1\327"+
    "\14\3\1\0\5\3\3\0\5\3\4\0\1\3\11\0"+
    "\3\3\1\330\11\3\1\0\5\3\3\0\5\3\40\0"+
    "\1\331\14\0\1\3\11\0\15\3\1\0\5\3\3\0"+
    "\1\3\1\332\3\3\24\0\1\333\45\0\1\334\33\0"+
    "\1\3\11\0\15\3\1\335\5\3\3\0\5\3\4\0"+
    "\1\3\11\0\12\3\1\65\2\3\1\0\5\3\3\0"+
    "\5\3\4\0\1\3\11\0\15\3\1\0\1\336\4\3"+
    "\3\0\5\3\4\0\1\3\11\0\1\3\1\337\13\3"+
    "\1\0\5\3\3\0\5\3\4\0\1\3\11\0\12\3"+
    "\1\332\2\3\1\0\5\3\3\0\5\3\27\0\1\340"+
    "\25\0\1\3\11\0\15\3\1\0\1\341\4\3\3\0"+
    "\5\3\4\0\1\3\11\0\1\342\14\3\1\0\5\3"+
    "\3\0\5\3\4\0\1\3\11\0\15\3\1\0\1\3"+
    "\1\306\3\3\3\0\5\3\4\0\1\3\11\0\13\3"+
    "\1\343\1\3\1\0\5\3\3\0\5\3\45\0\1\344"+
    "\7\0\1\3\11\0\15\3\1\345\5\3\3\0\5\3"+
    "\34\0\1\346\44\0\1\347\43\0\1\350\31\0\1\3"+
    "\11\0\12\3\1\261\2\3\1\0\5\3\3\0\5\3"+
    "\4\0\1\3\11\0\15\3\1\0\5\3\3\0\5\3"+
    "\1\0\1\351\20\0\1\352\32\0\1\3\11\0\12\3"+
    "\1\353\2\3\1\0\5\3\3\0\5\3\4\0\1\3"+
    "\11\0\2\3\1\354\12\3\1\0\5\3\3\0\5\3"+
    "\4\0\1\3\11\0\7\3\1\212\5\3\1\0\5\3"+
    "\3\0\5\3\35\0\1\355\43\0\1\356\52\0\1\357"+
    "\52\0\1\360\34\0\1\361\34\0\1\3\11\0\4\3"+
    "\1\362\10\3\1\0\5\3\3\0\5\3\4\0\1\3"+
    "\11\0\14\3\1\65\1\0\5\3\3\0\5\3\20\0"+
    "\1\363\51\0\1\364\61\0\1\365\35\0\1\366\76\0"+
    "\1\275\21\0\1\367\54\0\1\370\61\0\1\270\37\0"+
    "\1\371\62\0\1\372\50\0\1\373\44\0\1\374\44\0"+
    "\1\375\42\0\1\376\62\0\1\377\42\0\1\u0100\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9430];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\4\11\23\1\1\11\4\1\1\11"+
    "\1\1\1\0\36\1\1\0\13\1\1\0\42\1\1\0"+
    "\20\1\1\11\24\1\1\0\2\1\1\0\3\1\1\0"+
    "\25\1\2\0\3\1\1\11\5\1\1\0\6\1\1\0"+
    "\1\1\2\0\6\1\1\0\4\1\1\0\1\1\3\0"+
    "\2\1\1\0\3\1\1\11\4\0\1\11\1\0\2\1"+
    "\1\0\1\11\3\0\1\1\14\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol (int type, Object value){
        return new Symbol (type, yyline, yycolumn, value);
    }
    private Symbol symbol (int type){
        return new Symbol (type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Jcup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Jcup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { return new Symbol (sym.OPERADOR_COMPARATIVO, yychar, yyline, yytext());
          }
        case 27: break;
        case 20: 
          { return new Symbol (sym.OPERADOR_LOGICO, yychar, yyline, yytext());
          }
        case 28: break;
        case 26: 
          { return new Symbol (sym.SQL_JOINS, yychar, yyline, yytext());
          }
        case 29: break;
        case 21: 
          { return new Symbol (sym.RESTRICCION, yychar, yyline, yytext());
          }
        case 30: break;
        case 2: 
          { return new Symbol (sym.IDENTIFICADOR, yychar, yyline, yytext());
          }
        case 31: break;
        case 5: 
          { return new Symbol (sym.SALTOLINEA, yychar, yyline, yytext());
          }
        case 32: break;
        case 14: 
          { return new Symbol (sym.OPERADOR_BOOLEANO, yychar, yyline, yytext());
          }
        case 33: break;
        case 6: 
          { return new Symbol (sym.ABREPARE, yychar, yyline, yytext());
          }
        case 34: break;
        case 23: 
          { return new Symbol (sym.TCL, yychar, yyline, yytext());
          }
        case 35: break;
        case 17: 
          { return new Symbol (sym.FILTROTRAN, yychar, yyline, yytext());
          }
        case 36: break;
        case 24: 
          { return new Symbol (sym.DQL, yychar, yyline, yytext());
          }
        case 37: break;
        case 1: 
          { return new Symbol (sym.ERROR, yychar, yyline, yytext());
          }
        case 38: break;
        case 15: 
          { return new Symbol (sym.CONDICIONAL, yychar, yyline, yytext());
          }
        case 39: break;
        case 7: 
          { return new Symbol (sym.CIERRAPARE, yychar, yyline, yytext());
          }
        case 40: break;
        case 12: 
          { return new Symbol (sym.ALL, yychar, yyline, yytext());
          }
        case 41: break;
        case 13: 
          { return new Symbol (sym.PALABRA_RESERVADA, yychar, yyline, yytext());
          }
        case 42: break;
        case 22: 
          { return new Symbol (sym.DCL, yychar, yyline, yytext());
          }
        case 43: break;
        case 9: 
          { return new Symbol (sym.PUNTO_COMA, yychar, yyline, yytext());
          }
        case 44: break;
        case 8: 
          { return new Symbol (sym.COMA, yychar, yyline, yytext());
          }
        case 45: break;
        case 16: 
          { return new Symbol (sym.TIPO_DATO, yychar, yyline, yytext());
          }
        case 46: break;
        case 3: 
          { return new Symbol (sym.NUMERO, yychar, yyline, yytext());
          }
        case 47: break;
        case 4: 
          { /*ignore*/
          }
        case 48: break;
        case 10: 
          { return new Symbol (sym.APOSTROFE, yychar, yyline, yytext());
          }
        case 49: break;
        case 25: 
          { return new Symbol (sym.ASIGNACION, yychar, yyline, yytext());
          }
        case 50: break;
        case 18: 
          { return new Symbol (sym.DDL, yychar, yyline, yytext());
          }
        case 51: break;
        case 19: 
          { return new Symbol (sym.DML, yychar, yyline, yytext());
          }
        case 52: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
