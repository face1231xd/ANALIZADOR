/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package AS_Y_AL;

import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StringReader;
import java.nio.file.Files;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Symbol;
import javax.swing.JFileChooser;

/**
 *
 * @author Hp
 */
public class AnalizadorLexicoSintacticoFRM extends javax.swing.JFrame {

    /** Creates new form AnalizadorLexicoSintacticoFRM */
    public AnalizadorLexicoSintacticoFRM() {
        initComponents();
        this.setLocationRelativeTo(null);
    }
    private void analizadorLexico() throws IOException{
        int cont = 1;
        
        String expr = (String) txtFuente.getText();
        Lexer lexer = new Lexer(new StringReader(expr));
        String resultado = "LINEA " + cont + "\t\tSIMBOLO\n";
        while (true) {
            Tokens token = lexer.yylex();
            if (token == null) {
                txtAL.setText(resultado);
                return;
            }
            switch (token) {
                case SALTOLINEA:
                    cont++;
                    resultado += "LINEA " + cont + "\n";
                    break;
                case ABREPARE:
                    resultado += "  <PARENTESIS DE APERTURA>\t\t" + lexer.lexeme + "\n";
                    break;
               case CIERRAPARE:
                    resultado += "  <PARENTESIS DE CIERRE>\t" + lexer.lexeme + "\n";
                    break;
               case COMA:
                    resultado += "  <COMA>\t" + lexer.lexeme + "\n";
                    break; 
               case PUNTO_COMA:
                    resultado += "  <PUNTOCOMA>\t" + lexer.lexeme + "\n";
                    break;
               case APOSTROFE:
                    resultado += "  <APOSTROFE>\t" + lexer.lexeme + "\n";
                    break;
                case DDL:
                    resultado += "  <COMANDO DDL>\t" + lexer.lexeme + "\n";
                    break;
                case DQL:
                    resultado += "  <COMANDO DQL>\t" + lexer.lexeme + "\n";
                    break;
                case DML:
                    resultado += "  <COMANDO DML>\t" + lexer.lexeme + "\n";
                    break;
                case DCL:
                    resultado += "  <COMANDO DCL>\t" + lexer.lexeme + "\n";
                    break;
                 case TCL:
                    resultado += "  <COMANDO TCL>\t" + lexer.lexeme + "\n";
                    break;
                case OPERADOR_COMPARATIVO:
                    resultado += "  <OPERADOR COMPARATIVO>\t" + lexer.lexeme + "\n";
                    break;
                case OPERADOR_BOOLEANO:
                    resultado += "  <OPERADOR BOOLEANO>\t" + lexer.lexeme + "\n";
                    break;
                case OPERADOR_LOGICO:
                    resultado += "  <OPERADOR LOGICO>\t" + lexer.lexeme + "\n";
                    break;
                case SQL_JOINS:
                    resultado += "  <SENTENCIA SQL JOIN>\t" + lexer.lexeme + "\n";
                    break;
                case CONDICIONAL:
                    resultado += "  <CONDICIONAL>\t" + lexer.lexeme + "\n";
                    break;
                case PALABRA_RESERVADA:
                    resultado += "  <PALABRA RESERVADA>\t" + lexer.lexeme + "\n";
                    break;
                case ASIGNACION:
                    resultado += "  <ASIGNACION>\t" + lexer.lexeme + "\n";
                    break;
                case FILTROTRAN:
                    resultado += "  <FILTRO TRAN>\t" + lexer.lexeme + "\n";
                    break;
                case ALL:
                    resultado += "  <VARIOS ATRIBUTOS>\t" + lexer.lexeme + "\n";
                    break;    
                case RESTRICCION:
                    resultado += "  <RESTRICCION>\t" + lexer.lexeme + "\n";
                    break;
                case TIPO_DATO:
                    resultado += "  <TIPO DATO>\t" + lexer.lexeme + "\n";
                    break;
                case IDENTIFICADOR:
                    resultado += "  <IDENTFICADOR>\t" + lexer.lexeme + "\n";
                    break;
                case NUMERO:
                    resultado += "  <NUMERO>\t" + lexer.lexeme + "\n";
                    break;
                case ERROR:
                    resultado += "  <SIMBOLO NO DEFINIDO>\n";
                    break;
                default:
                    resultado += "Token: " + token + "\n";
                    break;
            }
        }
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnFuente = new javax.swing.JButton();
        btnLexico = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtFuente = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAL = new javax.swing.JTextArea();
        btnSintactico = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtAS = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnFuente.setText("Codigo Fuente");
        btnFuente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFuenteActionPerformed(evt);
            }
        });

        btnLexico.setText("Analisis Lexico");
        btnLexico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLexicoActionPerformed(evt);
            }
        });

        txtFuente.setColumns(20);
        txtFuente.setRows(5);
        jScrollPane1.setViewportView(txtFuente);

        txtAL.setColumns(20);
        txtAL.setRows(5);
        jScrollPane2.setViewportView(txtAL);

        btnSintactico.setText("Analisis Sintactico");
        btnSintactico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSintacticoActionPerformed(evt);
            }
        });

        txtAS.setColumns(20);
        txtAS.setRows(5);
        jScrollPane3.setViewportView(txtAS);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnFuente)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 760, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(77, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLexico)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSintactico))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnFuente)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLexico)
                    .addComponent(btnSintactico))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE))
                .addGap(40, 40, 40))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFuenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFuenteActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File("src\\AS_Y_AL"));
        
        chooser.showOpenDialog(null);
        File archivo = new File(chooser.getSelectedFile().getAbsolutePath());
        
        try {
            String ST = new String(Files.readAllBytes(archivo.toPath()));
            txtFuente.setText(ST);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(AnalizadorLexicoSintacticoFRM.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AnalizadorLexicoSintacticoFRM.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnFuenteActionPerformed

    private void btnLexicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLexicoActionPerformed
        // TODO add your handling code here:
         try {
            analizadorLexico();
        } catch (IOException ex) {
            Logger.getLogger(AnalizadorLexicoSintacticoFRM.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }//GEN-LAST:event_btnLexicoActionPerformed

    private void btnSintacticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSintacticoActionPerformed
        // TODO add your handling code here:
        String ST=txtFuente.getText();
         SintaxisC s = new SintaxisC(new AS_Y_AL.Jcup(new StringReader(ST)));
        
        try {
            s.parse();
            txtAS.setText("Analisis realizado correctamente");
            txtAS.setForeground(new Color(25, 111, 61));
        } catch (Exception ex) {
            Symbol sym = s.getS();
            txtAS.setText("Error de sintaxis. Linea: " + (sym.right + 1) + " Columna: " + (sym.left + 1) + ", Texto: \"" + sym.value + "\"");
            txtAS.setForeground(Color.red);
        }
    }//GEN-LAST:event_btnSintacticoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnalizadorLexicoSintacticoFRM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnalizadorLexicoSintacticoFRM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnalizadorLexicoSintacticoFRM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnalizadorLexicoSintacticoFRM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AnalizadorLexicoSintacticoFRM().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFuente;
    private javax.swing.JButton btnLexico;
    private javax.swing.JButton btnSintactico;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea txtAL;
    private javax.swing.JTextArea txtAS;
    private javax.swing.JTextArea txtFuente;
    // End of variables declaration//GEN-END:variables

}
