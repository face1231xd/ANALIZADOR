/* The following code was generated by JFlex 1.4.3 on 05/12/21 08:22 AM */

package AS_Y_AL;
import static AS_Y_AL.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 05/12/21 08:22 AM from the specification file
 * <tt>D:/OneDrive/Escritorio/Examen_Final_CYLP/ParedesCalderonCarlosManuel_EF/src/AS_Y_AL/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\4\2\0\1\3\22\0\1\30\1\40\5\0\1\12"+
    "\1\6\1\7\1\46\1\0\1\10\1\51\1\0\1\5\2\2\1\47"+
    "\7\2\1\0\1\11\1\36\1\37\1\36\2\0\1\16\1\35\1\13"+
    "\1\20\1\15\1\43\1\33\1\44\1\31\1\41\1\32\1\23\1\26"+
    "\1\25\1\21\1\22\1\1\1\14\1\27\1\17\1\24\1\34\1\45"+
    "\1\1\1\42\1\1\4\0\1\50\1\0\32\1\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\12\15\2\1\4\4\2\2\13"+
    "\1\1\3\2\1\14\1\4\1\0\15\2\1\15\5\2"+
    "\1\16\12\2\1\0\13\2\1\0\12\2\1\17\1\2"+
    "\1\16\16\2\1\16\6\2\1\0\20\2\1\3\3\2"+
    "\1\20\5\2\1\21\3\2\1\22\5\2\1\23\1\0"+
    "\2\2\1\0\3\2\1\0\7\2\1\24\15\2\2\0"+
    "\3\2\1\25\1\2\1\26\3\2\1\0\2\2\1\27"+
    "\3\2\1\0\1\2\2\0\1\30\3\2\1\31\1\2"+
    "\1\0\4\2\1\0\1\2\3\0\2\2\1\0\3\2"+
    "\1\24\4\0\1\20\1\0\2\2\1\0\1\32\3\0"+
    "\1\25\14\0\1\27\1\30";

  private static int [] zzUnpackAction() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\52\0\52\0\52\0\52\0\u0150\0\u017a\0\u01a4\0\u01ce"+
    "\0\u01f8\0\u0222\0\u024c\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e"+
    "\0\u0348\0\u0372\0\u039c\0\u03c6\0\u03f0\0\u041a\0\u0444\0\52"+
    "\0\u0444\0\u046e\0\u0498\0\u04c2\0\52\0\u04ec\0\u0516\0\u0540"+
    "\0\u056a\0\u0594\0\u05be\0\u05e8\0\u0612\0\u063c\0\u0666\0\u0690"+
    "\0\u06ba\0\u06e4\0\u070e\0\u0738\0\124\0\u0762\0\u078c\0\u07b6"+
    "\0\u07e0\0\u080a\0\u0834\0\u085e\0\u0888\0\u08b2\0\u08dc\0\u0906"+
    "\0\u0930\0\u095a\0\u0984\0\u09ae\0\u09d8\0\u0a02\0\u0a2c\0\u0a56"+
    "\0\u0a80\0\u0aaa\0\u0ad4\0\u0afe\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6"+
    "\0\u0bd0\0\u0bfa\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6"+
    "\0\u0d20\0\u0d4a\0\u0d74\0\u0d9e\0\124\0\u0dc8\0\124\0\u0df2"+
    "\0\u0e1c\0\u0e46\0\u0e70\0\u0e9a\0\u0ec4\0\u0eee\0\u0f18\0\u0f42"+
    "\0\u0f6c\0\u0f96\0\u0fc0\0\u0fea\0\u1014\0\u103e\0\u1068\0\u1092"+
    "\0\u10bc\0\u10e6\0\u1110\0\u113a\0\u1164\0\u118e\0\u11b8\0\u11e2"+
    "\0\u120c\0\u1236\0\u1260\0\u128a\0\u12b4\0\u12de\0\u1308\0\u1332"+
    "\0\u135c\0\u1386\0\u13b0\0\u13da\0\u1404\0\52\0\u142e\0\u1458"+
    "\0\u1482\0\124\0\u14ac\0\u14d6\0\u1500\0\u152a\0\u1554\0\124"+
    "\0\u157e\0\u15a8\0\u15d2\0\124\0\u15fc\0\u1626\0\u1650\0\u167a"+
    "\0\u16a4\0\124\0\u16ce\0\u16f8\0\u1722\0\u174c\0\u1776\0\u17a0"+
    "\0\u17ca\0\u17f4\0\u181e\0\u1848\0\u1872\0\u189c\0\u18c6\0\u18f0"+
    "\0\u191a\0\124\0\u1944\0\u196e\0\u1998\0\u19c2\0\u19ec\0\u1a16"+
    "\0\u1a40\0\u1a6a\0\u1a94\0\u1abe\0\u1ae8\0\u1b12\0\u1b3c\0\u1b66"+
    "\0\u1b90\0\u1bba\0\u1be4\0\u1c0e\0\52\0\u1c38\0\124\0\u1c62"+
    "\0\u1c8c\0\u1cb6\0\u1ce0\0\u1d0a\0\u1d34\0\124\0\u1d5e\0\u1d88"+
    "\0\u1db2\0\u1ddc\0\u1e06\0\u1e30\0\u1e5a\0\u1e84\0\u1eae\0\u1ed8"+
    "\0\u1f02\0\124\0\u1f2c\0\u1f56\0\u1f80\0\u1faa\0\u1fd4\0\u1ffe"+
    "\0\u2028\0\u2052\0\u207c\0\u20a6\0\u20d0\0\u20fa\0\u2124\0\u214e"+
    "\0\u2178\0\u21a2\0\u21cc\0\52\0\u21f6\0\u2220\0\u224a\0\u2274"+
    "\0\52\0\u229e\0\u22c8\0\u22f2\0\u231c\0\52\0\u2346\0\u2370"+
    "\0\u239a\0\124\0\u23c4\0\u23ee\0\u2418\0\u2442\0\u246c\0\u2496"+
    "\0\u24c0\0\u24ea\0\u2514\0\u253e\0\u2568\0\u2592\0\52\0\52";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\3\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\3\1\43\1\3\1\44\1\45\1\4"+
    "\2\2\53\0\1\3\11\0\15\3\1\0\5\3\3\0"+
    "\5\3\2\0\1\3\3\0\1\4\44\0\1\4\5\0"+
    "\1\5\24\0\1\5\25\0\1\6\52\0\1\46\115\0"+
    "\1\47\1\0\1\3\11\0\1\3\1\50\1\3\1\51"+
    "\2\3\1\52\6\3\1\0\5\3\3\0\3\3\1\53"+
    "\1\3\2\0\1\3\2\0\1\3\11\0\2\3\1\54"+
    "\3\3\1\55\6\3\1\0\1\56\4\3\3\0\5\3"+
    "\2\0\1\3\2\0\1\3\11\0\12\3\1\57\2\3"+
    "\1\0\5\3\3\0\5\3\2\0\1\3\2\0\1\3"+
    "\11\0\5\3\1\60\2\3\1\61\1\3\1\62\2\3"+
    "\1\0\5\3\3\0\5\3\2\0\1\3\2\0\1\3"+
    "\11\0\1\3\1\63\1\3\1\64\2\3\1\65\6\3"+
    "\1\0\1\66\4\3\3\0\5\3\2\0\1\3\2\0"+
    "\1\3\11\0\1\3\1\67\1\70\1\71\2\3\1\72"+
    "\6\3\1\0\5\3\3\0\5\3\2\0\1\3\2\0"+
    "\1\3\11\0\1\3\1\73\13\3\1\0\5\3\3\0"+
    "\5\3\2\0\1\3\2\0\1\3\11\0\1\3\1\74"+
    "\13\3\1\0\5\3\3\0\5\3\2\0\1\3\2\0"+
    "\1\3\11\0\2\3\1\75\3\3\1\76\6\3\1\0"+
    "\5\3\3\0\5\3\2\0\1\3\2\0\1\3\11\0"+
    "\7\3\1\77\2\3\1\100\2\3\1\0\5\3\3\0"+
    "\5\3\2\0\1\3\2\0\1\3\11\0\6\3\1\101"+
    "\2\3\1\102\3\3\1\0\5\3\3\0\5\3\2\0"+
    "\1\3\2\0\1\3\11\0\2\3\1\103\12\3\1\0"+
    "\5\3\3\0\5\3\2\0\1\3\2\0\1\3\11\0"+
    "\2\3\1\104\1\105\11\3\1\0\5\3\3\0\5\3"+
    "\2\0\1\3\4\0\1\5\21\0\1\106\2\0\1\5"+
    "\22\0\1\3\11\0\12\3\1\107\2\3\1\0\5\3"+
    "\3\0\5\3\2\0\1\3\2\0\1\3\11\0\1\3"+
    "\1\110\13\3\1\0\5\3\3\0\5\3\2\0\1\3"+
    "\2\0\1\3\11\0\3\3\1\111\11\3\1\0\5\3"+
    "\3\0\5\3\2\0\1\3\2\0\1\3\11\0\2\3"+
    "\1\112\12\3\1\0\5\3\3\0\5\3\2\0\1\3"+
    "\40\0\1\40\13\0\1\3\11\0\6\3\1\113\6\3"+
    "\1\0\5\3\3\0\5\3\2\0\1\3\2\0\1\3"+
    "\11\0\1\3\1\114\4\3\1\115\1\3\1\116\1\117"+
    "\3\3\1\0\5\3\3\0\5\3\2\0\1\3\2\0"+
    "\1\3\11\0\15\3\1\0\1\120\4\3\3\0\3\3"+
    "\1\121\1\3\2\0\1\3\1\0\4\46\1\0\45\46"+
    "\2\0\1\122\44\0\1\122\3\0\1\3\11\0\2\3"+
    "\1\123\12\3\1\0\5\3\3\0\5\3\2\0\1\3"+
    "\2\0\1\3\11\0\14\3\1\124\1\0\5\3\3\0"+
    "\5\3\2\0\1\3\2\0\1\3\11\0\12\3\1\125"+
    "\1\126\1\3\1\0\5\3\3\0\5\3\2\0\1\3"+
    "\2\0\1\3\11\0\3\3\1\127\11\3\1\0\5\3"+
    "\3\0\5\3\2\0\1\3\2\0\1\3\11\0\12\3"+
    "\1\130\2\3\1\0\3\3\1\131\1\3\3\0\2\3"+
    "\1\132\2\3\2\0\1\3\2\0\1\3\11\0\10\3"+
    "\1\133\4\3\1\0\5\3\3\0\5\3\2\0\1\3"+
    "\2\0\1\3\11\0\15\3\1\0\2\3\1\134\2\3"+
    "\3\0\5\3\2\0\1\3\2\0\1\3\11\0\5\3"+
    "\1\135\7\3\1\0\5\3\3\0\5\3\2\0\1\3"+
    "\2\0\1\3\11\0\5\3\1\65\7\3\1\0\5\3"+
    "\3\0\5\3\2\0\1\3\2\0\1\3\11\0\4\3"+
    "\1\136\10\3\1\0\5\3\3\0\5\3\2\0\1\3"+
    "\2\0\1\3\11\0\5\3\1\137\7\3\1\0\5\3"+
    "\3\0\5\3\2\0\1\3\2\0\1\3\11\0\3\3"+
    "\1\140\5\3\1\141\3\3\1\0\5\3\3\0\5\3"+
    "\2\0\1\3\2\0\1\3\11\0\15\3\1\0\4\3"+
    "\1\142\3\0\5\3\2\0\1\3\2\0\1\3\11\0"+
    "\13\3\1\143\1\3\1\0\5\3\3\0\5\3\2\0"+
    "\1\3\2\0\1\3\11\0\6\3\1\144\6\3\1\0"+
    "\5\3\3\0\5\3\2\0\1\3\2\0\1\3\11\0"+
    "\10\3\1\145\4\3\1\0\5\3\3\0\5\3\2\0"+
    "\1\3\2\0\1\3\11\0\4\3\1\146\10\3\1\0"+
    "\5\3\3\0\5\3\2\0\1\3\2\0\1\3\11\0"+
    "\11\3\1\147\3\3\1\0\5\3\3\0\5\3\2\0"+
    "\1\3\2\0\1\3\11\0\5\3\1\150\7\3\1\0"+
    "\5\3\3\0\5\3\2\0\1\3\2\0\1\3\11\0"+
    "\15\3\1\0\1\151\4\3\3\0\5\3\2\0\1\3"+
    "\2\0\1\3\11\0\15\3\1\0\5\3\3\0\2\3"+
    "\1\152\2\3\2\0\1\3\2\0\1\3\11\0\1\153"+
    "\14\3\1\0\5\3\3\0\5\3\2\0\1\3\2\0"+
    "\1\3\11\0\5\3\1\154\7\3\1\0\5\3\3\0"+
    "\5\3\2\0\1\3\2\0\1\3\11\0\15\3\1\0"+
    "\1\155\4\3\3\0\5\3\2\0\1\3\2\0\1\3"+
    "\11\0\4\3\1\156\10\3\1\0\5\3\3\0\5\3"+
    "\2\0\1\3\2\0\1\3\11\0\13\3\1\157\1\3"+
    "\1\0\5\3\3\0\5\3\2\0\1\3\2\0\1\3"+
    "\11\0\1\3\1\160\13\3\1\0\5\3\3\0\5\3"+
    "\2\0\1\3\2\0\1\3\11\0\4\3\1\161\3\3"+
    "\1\162\3\3\1\163\1\0\5\3\3\0\5\3\2\0"+
    "\1\3\2\0\1\3\11\0\15\3\1\0\3\3\1\164"+
    "\1\3\3\0\5\3\2\0\1\3\25\0\1\165\26\0"+
    "\1\3\11\0\4\3\1\166\5\3\1\167\1\3\1\170"+
    "\1\0\5\3\3\0\5\3\2\0\1\3\2\0\1\3"+
    "\11\0\3\3\1\171\2\3\1\172\6\3\1\0\5\3"+
    "\3\0\5\3\2\0\1\3\2\0\1\3\11\0\1\3"+
    "\1\173\6\3\1\174\4\3\1\0\5\3\3\0\5\3"+
    "\2\0\1\3\2\0\1\3\11\0\15\3\1\0\2\3"+
    "\1\175\2\3\3\0\5\3\2\0\1\3\2\0\1\3"+
    "\11\0\15\3\1\0\1\176\4\3\3\0\5\3\2\0"+
    "\1\3\2\0\1\3\11\0\6\3\1\177\6\3\1\0"+
    "\5\3\3\0\5\3\2\0\1\3\2\0\1\3\11\0"+
    "\1\3\1\200\13\3\1\0\5\3\3\0\5\3\2\0"+
    "\1\3\2\0\1\3\11\0\6\3\1\201\6\3\1\0"+
    "\5\3\3\0\5\3\2\0\1\3\2\0\1\3\11\0"+
    "\10\3\1\202\4\3\1\0\5\3\3\0\5\3\2\0"+
    "\1\3\2\0\1\3\11\0\4\3\1\203\10\3\1\0"+
    "\5\3\3\0\5\3\2\0\1\3\2\0\1\3\11\0"+
    "\2\3\1\204\12\3\1\0\1\205\4\3\3\0\5\3"+
    "\2\0\1\3\3\0\1\122\4\0\1\206\37\0\1\122"+
    "\3\0\1\3\11\0\3\3\1\207\11\3\1\0\5\3"+
    "\3\0\5\3\2\0\1\3\2\0\1\3\11\0\2\3"+
    "\1\135\12\3\1\0\5\3\3\0\5\3\2\0\1\3"+
    "\2\0\1\3\11\0\14\3\1\210\1\0\5\3\3\0"+
    "\5\3\2\0\1\3\2\0\1\3\11\0\13\3\1\211"+
    "\1\3\1\0\5\3\3\0\5\3\2\0\1\3\2\0"+
    "\1\3\11\0\1\3\1\212\13\3\1\0\5\3\3\0"+
    "\5\3\2\0\1\3\2\0\1\3\11\0\3\3\1\213"+
    "\11\3\1\0\5\3\3\0\5\3\2\0\1\3\2\0"+
    "\1\3\11\0\6\3\1\214\6\3\1\0\5\3\3\0"+
    "\5\3\2\0\1\3\2\0\1\3\11\0\2\3\1\215"+
    "\12\3\1\0\5\3\3\0\5\3\2\0\1\3\2\0"+
    "\1\3\11\0\10\3\1\216\4\3\1\0\5\3\3\0"+
    "\5\3\2\0\1\3\2\0\1\3\11\0\15\3\1\0"+
    "\5\3\3\0\3\3\1\152\1\3\2\0\1\3\2\0"+
    "\1\3\11\0\2\3\1\217\12\3\1\0\5\3\3\0"+
    "\5\3\2\0\1\3\2\0\1\3\11\0\12\3\1\220"+
    "\2\3\1\0\5\3\3\0\5\3\2\0\1\3\2\0"+
    "\1\3\11\0\12\3\1\221\2\3\1\0\5\3\3\0"+
    "\5\3\2\0\1\3\2\0\1\3\11\0\10\3\1\222"+
    "\4\3\1\0\5\3\3\0\5\3\2\0\1\3\2\0"+
    "\1\3\11\0\2\3\1\223\12\3\1\0\5\3\3\0"+
    "\5\3\2\0\1\3\2\0\1\3\11\0\7\3\1\224"+
    "\5\3\1\0\5\3\3\0\5\3\2\0\1\3\2\0"+
    "\1\3\11\0\2\3\1\225\12\3\1\0\5\3\3\0"+
    "\5\3\2\0\1\3\2\0\1\3\11\0\2\3\1\212"+
    "\12\3\1\0\5\3\3\0\5\3\2\0\1\3\2\0"+
    "\1\3\11\0\15\3\1\0\4\3\1\226\3\0\5\3"+
    "\2\0\1\3\2\0\1\3\11\0\2\3\1\227\12\3"+
    "\1\0\5\3\3\0\5\3\2\0\1\3\2\0\1\3"+
    "\11\0\13\3\1\230\1\3\1\0\5\3\3\0\5\3"+
    "\2\0\1\3\2\0\1\3\11\0\4\3\1\231\10\3"+
    "\1\0\5\3\3\0\5\3\2\0\1\3\2\0\1\3"+
    "\11\0\15\3\1\0\1\3\1\232\3\3\3\0\5\3"+
    "\2\0\1\3\2\0\1\3\11\0\3\3\1\225\11\3"+
    "\1\0\5\3\3\0\5\3\2\0\1\3\2\0\1\3"+
    "\11\0\6\3\1\176\6\3\1\0\5\3\3\0\5\3"+
    "\2\0\1\3\2\0\1\3\11\0\15\3\1\233\5\3"+
    "\3\0\5\3\2\0\1\3\2\0\1\3\11\0\15\3"+
    "\1\0\4\3\1\234\3\0\5\3\2\0\1\3\2\0"+
    "\1\3\11\0\15\3\1\0\2\3\1\235\2\3\3\0"+
    "\5\3\2\0\1\3\2\0\1\3\11\0\15\3\1\236"+
    "\5\3\3\0\5\3\2\0\1\3\2\0\1\3\11\0"+
    "\2\3\1\237\12\3\1\0\5\3\3\0\5\3\2\0"+
    "\1\3\2\0\1\3\11\0\14\3\1\240\1\0\5\3"+
    "\3\0\5\3\2\0\1\3\2\0\1\3\11\0\2\3"+
    "\1\241\12\3\1\0\5\3\3\0\5\3\2\0\1\3"+
    "\24\0\1\242\27\0\1\3\11\0\6\3\1\65\6\3"+
    "\1\0\5\3\3\0\5\3\2\0\1\3\2\0\1\3"+
    "\11\0\2\3\1\243\12\3\1\0\5\3\3\0\5\3"+
    "\2\0\1\3\2\0\1\3\11\0\2\3\1\244\12\3"+
    "\1\0\5\3\3\0\5\3\2\0\1\3\2\0\1\3"+
    "\11\0\12\3\1\245\2\3\1\0\5\3\3\0\5\3"+
    "\2\0\1\3\2\0\1\3\11\0\11\3\1\246\3\3"+
    "\1\0\5\3\3\0\5\3\2\0\1\3\2\0\1\3"+
    "\11\0\1\247\14\3\1\0\5\3\3\0\5\3\2\0"+
    "\1\3\2\0\1\3\11\0\11\3\1\250\3\3\1\0"+
    "\5\3\3\0\5\3\2\0\1\3\2\0\1\3\11\0"+
    "\15\3\1\0\1\251\4\3\3\0\5\3\2\0\1\3"+
    "\2\0\1\3\11\0\12\3\1\252\2\3\1\0\5\3"+
    "\3\0\5\3\2\0\1\3\2\0\1\3\11\0\13\3"+
    "\1\65\1\3\1\0\5\3\3\0\5\3\2\0\1\3"+
    "\2\0\1\3\11\0\2\3\1\253\12\3\1\0\5\3"+
    "\3\0\5\3\2\0\1\3\2\0\1\3\11\0\3\3"+
    "\1\254\11\3\1\0\5\3\3\0\5\3\2\0\1\3"+
    "\2\0\1\3\11\0\10\3\1\255\4\3\1\0\5\3"+
    "\3\0\5\3\2\0\1\3\2\0\1\3\11\0\15\3"+
    "\1\0\5\3\3\0\3\3\1\65\1\3\2\0\1\3"+
    "\2\0\1\3\11\0\1\3\1\124\13\3\1\0\5\3"+
    "\3\0\5\3\2\0\1\3\2\0\1\3\11\0\10\3"+
    "\1\124\4\3\1\0\5\3\3\0\5\3\2\0\1\3"+
    "\2\0\1\3\11\0\4\3\1\256\10\3\1\0\5\3"+
    "\3\0\5\3\2\0\1\3\2\0\1\3\11\0\4\3"+
    "\1\257\10\3\1\0\5\3\3\0\5\3\2\0\1\3"+
    "\2\0\1\3\11\0\2\3\1\260\12\3\1\0\1\261"+
    "\4\3\3\0\5\3\2\0\1\3\2\0\1\3\11\0"+
    "\13\3\1\256\1\3\1\0\5\3\3\0\5\3\2\0"+
    "\1\3\2\0\1\3\11\0\15\3\1\0\1\3\1\262"+
    "\3\3\3\0\5\3\2\0\1\3\2\0\1\3\11\0"+
    "\1\3\1\263\13\3\1\0\5\3\3\0\5\3\2\0"+
    "\1\3\2\0\1\3\11\0\15\3\1\0\4\3\1\264"+
    "\3\0\5\3\2\0\1\3\2\0\1\3\11\0\1\3"+
    "\1\224\13\3\1\0\5\3\3\0\5\3\2\0\1\3"+
    "\2\0\1\3\11\0\1\123\14\3\1\0\5\3\3\0"+
    "\5\3\2\0\1\3\2\0\1\3\11\0\2\3\1\65"+
    "\12\3\1\0\5\3\3\0\5\3\2\0\1\3\2\0"+
    "\1\3\11\0\14\3\1\265\1\0\5\3\3\0\5\3"+
    "\2\0\1\3\2\0\1\3\11\0\4\3\1\235\10\3"+
    "\1\0\5\3\3\0\5\3\2\0\1\3\2\0\1\3"+
    "\11\0\10\3\1\146\4\3\1\0\5\3\3\0\5\3"+
    "\2\0\1\3\2\0\1\3\11\0\1\3\1\266\13\3"+
    "\1\0\5\3\3\0\5\3\2\0\1\3\2\0\1\3"+
    "\11\0\3\3\1\267\11\3\1\0\5\3\3\0\5\3"+
    "\2\0\1\3\2\0\1\3\11\0\15\3\1\270\5\3"+
    "\3\0\5\3\2\0\1\3\26\0\1\106\25\0\1\3"+
    "\11\0\2\3\1\127\12\3\1\0\5\3\3\0\5\3"+
    "\2\0\1\3\2\0\1\3\11\0\2\3\1\232\12\3"+
    "\1\0\5\3\3\0\5\3\2\0\1\3\20\0\1\271"+
    "\33\0\1\3\11\0\1\272\14\3\1\0\5\3\3\0"+
    "\5\3\2\0\1\3\2\0\1\3\11\0\15\3\1\0"+
    "\1\273\4\3\3\0\5\3\2\0\1\3\2\0\1\3"+
    "\11\0\7\3\1\274\5\3\1\0\5\3\3\0\5\3"+
    "\2\0\1\3\24\0\1\275\27\0\1\3\11\0\1\3"+
    "\1\231\13\3\1\0\5\3\3\0\5\3\2\0\1\3"+
    "\2\0\1\3\11\0\1\3\1\276\13\3\1\0\5\3"+
    "\3\0\5\3\2\0\1\3\2\0\1\3\11\0\4\3"+
    "\1\277\10\3\1\0\5\3\3\0\5\3\2\0\1\3"+
    "\2\0\1\3\11\0\7\3\1\266\5\3\1\0\5\3"+
    "\3\0\5\3\2\0\1\3\2\0\1\3\11\0\15\3"+
    "\1\0\5\3\3\0\3\3\1\300\1\3\2\0\1\3"+
    "\2\0\1\3\11\0\2\3\1\301\12\3\1\0\5\3"+
    "\3\0\5\3\2\0\1\3\2\0\1\3\11\0\12\3"+
    "\1\135\2\3\1\0\5\3\3\0\5\3\2\0\1\3"+
    "\2\0\1\3\11\0\15\3\1\0\1\302\4\3\3\0"+
    "\5\3\2\0\1\3\2\0\1\3\11\0\4\3\1\212"+
    "\10\3\1\0\5\3\3\0\5\3\2\0\1\3\2\0"+
    "\1\3\11\0\15\3\1\303\5\3\3\0\5\3\2\0"+
    "\1\3\2\0\1\3\11\0\2\3\1\224\12\3\1\0"+
    "\5\3\3\0\5\3\2\0\1\3\2\0\1\3\11\0"+
    "\1\3\1\304\13\3\1\0\5\3\3\0\5\3\2\0"+
    "\1\3\2\0\1\3\11\0\12\3\1\305\2\3\1\0"+
    "\5\3\3\0\5\3\2\0\1\3\2\0\1\3\11\0"+
    "\4\3\1\306\10\3\1\0\5\3\3\0\5\3\2\0"+
    "\1\3\2\0\1\3\11\0\2\3\1\277\12\3\1\0"+
    "\5\3\3\0\5\3\2\0\1\3\2\0\1\3\11\0"+
    "\2\3\1\307\12\3\1\0\5\3\3\0\5\3\2\0"+
    "\1\3\2\0\1\3\11\0\3\3\1\310\11\3\1\0"+
    "\5\3\3\0\5\3\2\0\1\3\2\0\1\3\11\0"+
    "\4\3\1\311\10\3\1\0\5\3\3\0\5\3\2\0"+
    "\1\3\2\0\1\3\11\0\15\3\1\312\5\3\3\0"+
    "\5\3\2\0\1\3\2\0\1\3\11\0\1\3\1\313"+
    "\13\3\1\0\5\3\3\0\5\3\2\0\1\3\42\0"+
    "\1\314\24\0\1\315\36\0\1\3\11\0\4\3\1\316"+
    "\10\3\1\0\5\3\3\0\5\3\2\0\1\3\2\0"+
    "\1\3\11\0\6\3\1\317\6\3\1\0\5\3\3\0"+
    "\5\3\2\0\1\3\2\0\1\3\11\0\6\3\1\320"+
    "\6\3\1\0\5\3\3\0\5\3\2\0\1\3\2\0"+
    "\1\3\11\0\4\3\1\232\10\3\1\0\5\3\3\0"+
    "\5\3\2\0\1\3\2\0\1\3\11\0\3\3\1\321"+
    "\11\3\1\0\5\3\3\0\5\3\2\0\1\3\2\0"+
    "\1\3\11\0\14\3\1\322\1\0\5\3\3\0\5\3"+
    "\2\0\1\3\2\0\1\3\11\0\15\3\1\0\2\3"+
    "\1\323\2\3\3\0\5\3\2\0\1\3\22\0\1\324"+
    "\31\0\1\3\11\0\3\3\1\325\11\3\1\0\5\3"+
    "\3\0\5\3\2\0\1\3\2\0\1\3\11\0\4\3"+
    "\1\224\10\3\1\0\5\3\3\0\5\3\2\0\1\3"+
    "\2\0\1\3\11\0\12\3\1\326\2\3\1\0\5\3"+
    "\3\0\5\3\2\0\1\3\2\0\1\3\11\0\1\327"+
    "\14\3\1\0\5\3\3\0\5\3\2\0\1\3\2\0"+
    "\1\3\11\0\3\3\1\330\11\3\1\0\5\3\3\0"+
    "\5\3\2\0\1\3\36\0\1\331\15\0\1\3\11\0"+
    "\15\3\1\0\5\3\3\0\1\3\1\332\3\3\2\0"+
    "\1\3\22\0\1\333\46\0\1\334\34\0\1\3\11\0"+
    "\15\3\1\335\5\3\3\0\5\3\2\0\1\3\2\0"+
    "\1\3\11\0\12\3\1\65\2\3\1\0\5\3\3\0"+
    "\5\3\2\0\1\3\2\0\1\3\11\0\15\3\1\0"+
    "\1\336\4\3\3\0\5\3\2\0\1\3\2\0\1\3"+
    "\11\0\1\3\1\337\13\3\1\0\5\3\3\0\5\3"+
    "\2\0\1\3\2\0\1\3\11\0\12\3\1\332\2\3"+
    "\1\0\5\3\3\0\5\3\2\0\1\3\25\0\1\340"+
    "\26\0\1\3\11\0\15\3\1\0\1\341\4\3\3\0"+
    "\5\3\2\0\1\3\2\0\1\3\11\0\1\342\14\3"+
    "\1\0\5\3\3\0\5\3\2\0\1\3\2\0\1\3"+
    "\11\0\15\3\1\0\1\3\1\306\3\3\3\0\5\3"+
    "\2\0\1\3\2\0\1\3\11\0\13\3\1\343\1\3"+
    "\1\0\5\3\3\0\5\3\2\0\1\3\43\0\1\344"+
    "\10\0\1\3\11\0\15\3\1\345\5\3\3\0\5\3"+
    "\2\0\1\3\32\0\1\346\45\0\1\347\44\0\1\350"+
    "\32\0\1\3\11\0\12\3\1\261\2\3\1\0\5\3"+
    "\3\0\5\3\2\0\1\3\2\0\1\3\11\0\15\3"+
    "\1\0\5\3\3\0\5\3\1\0\1\351\1\3\20\0"+
    "\1\352\33\0\1\3\11\0\12\3\1\353\2\3\1\0"+
    "\5\3\3\0\5\3\2\0\1\3\2\0\1\3\11\0"+
    "\2\3\1\354\12\3\1\0\5\3\3\0\5\3\2\0"+
    "\1\3\2\0\1\3\11\0\7\3\1\212\5\3\1\0"+
    "\5\3\3\0\5\3\2\0\1\3\33\0\1\355\44\0"+
    "\1\356\53\0\1\357\53\0\1\360\35\0\1\361\35\0"+
    "\1\3\11\0\4\3\1\362\10\3\1\0\5\3\3\0"+
    "\5\3\2\0\1\3\2\0\1\3\11\0\14\3\1\65"+
    "\1\0\5\3\3\0\5\3\2\0\1\3\16\0\1\363"+
    "\52\0\1\364\62\0\1\365\36\0\1\366\77\0\1\275"+
    "\22\0\1\367\55\0\1\370\62\0\1\270\40\0\1\371"+
    "\63\0\1\372\51\0\1\373\45\0\1\374\45\0\1\375"+
    "\43\0\1\376\63\0\1\377\43\0\1\u0100\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9660];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\4\11\23\1\1\11\4\1\1\11"+
    "\1\1\1\0\36\1\1\0\13\1\1\0\42\1\1\0"+
    "\20\1\1\11\24\1\1\0\2\1\1\0\3\1\1\0"+
    "\25\1\2\0\3\1\1\11\5\1\1\0\6\1\1\0"+
    "\1\1\2\0\6\1\1\0\4\1\1\0\1\1\3\0"+
    "\2\1\1\0\3\1\1\11\4\0\1\11\1\0\2\1"+
    "\1\0\1\11\3\0\1\1\14\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 116) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 25: 
          { lexeme = yytext(); return ASIGNACION;
          }
        case 27: break;
        case 6: 
          { lexeme=yytext(); return ABREPARE;
          }
        case 28: break;
        case 22: 
          { lexeme=yytext(); return DCL;
          }
        case 29: break;
        case 8: 
          { lexeme=yytext(); return COMA;
          }
        case 30: break;
        case 10: 
          { lexeme=yytext(); return APOSTROFE;
          }
        case 31: break;
        case 26: 
          { lexeme = yytext(); return SQL_JOINS;
          }
        case 32: break;
        case 9: 
          { lexeme=yytext(); return PUNTO_COMA;
          }
        case 33: break;
        case 17: 
          { lexeme = yytext(); return FILTROTRAN;
          }
        case 34: break;
        case 3: 
          { lexeme=yytext(); return NUMERO;
          }
        case 35: break;
        case 23: 
          { lexeme=yytext(); return TCL;
          }
        case 36: break;
        case 16: 
          { lexeme = yytext(); return TIPO_DATO;
          }
        case 37: break;
        case 12: 
          { lexeme = yytext(); return ALL;
          }
        case 38: break;
        case 15: 
          { lexeme = yytext(); return CONDICIONAL;
          }
        case 39: break;
        case 21: 
          { lexeme = yytext(); return RESTRICCION;
          }
        case 40: break;
        case 19: 
          { lexeme=yytext(); return DML;
          }
        case 41: break;
        case 5: 
          { return SALTOLINEA;
          }
        case 42: break;
        case 18: 
          { lexeme=yytext(); return DDL;
          }
        case 43: break;
        case 20: 
          { lexeme = yytext(); return OPERADOR_LOGICO;
          }
        case 44: break;
        case 13: 
          { lexeme = yytext(); return PALABRA_RESERVADA;
          }
        case 45: break;
        case 1: 
          { return ERROR;
          }
        case 46: break;
        case 2: 
          { lexeme=yytext(); return IDENTIFICADOR;
          }
        case 47: break;
        case 14: 
          { lexeme = yytext(); return OPERADOR_BOOLEANO;
          }
        case 48: break;
        case 4: 
          { /*ignore*/
          }
        case 49: break;
        case 7: 
          { lexeme=yytext(); return CIERRAPARE;
          }
        case 50: break;
        case 24: 
          { lexeme=yytext(); return DQL;
          }
        case 51: break;
        case 11: 
          { lexeme = yytext(); return OPERADOR_COMPARATIVO;
          }
        case 52: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
